# cfg/nes.cfg
# Linker config for NES NROM (Mapper 0) - 32K PRG, 8K CHR

# Define memory areas available on the NES
MEMORY {
    ZP:       start = $00,    size = $100,  type = rw, file = ""; # Zero Page
    # $0100-$01FF is the stack
    RAM:      start = $0200,  size = $600,  type = rw, file = ""; # Main RAM ($0200-$07FF)
    HEADER:   start = $0,     size = $10,   type = ro, file = %O, fill = yes, fillval = $00; # iNES header
    PRG:      start = $8000,  size = $8000, type = ro, file = %O, fill = yes, fillval = $FF; # 32K PRG ROM bank
    CHR:      start = $0,     size = $2000, type = ro, file = %O, fill = yes, fillval = $FF; # 8K CHR ROM bank
}

# Define how code/data segments are mapped to memory areas
SEGMENTS {
    HEADER:   load = HEADER,  type = ro,  align = $10;
    STARTUP:  load = PRG,     type = ro,  define = yes;
    LOWCODE:  load = PRG,     type = ro,  optional = yes; # For code near $8000 if needed
    INIT:     load = PRG,     type = ro,  optional = yes;
    CODE:     load = PRG,     type = ro,  define = yes;
    RODATA:   load = PRG,     type = ro,  define = yes;
    DATA:     load = PRG,     type = rw,  define = yes, run = RAM; # Initialized data (copied to RAM)
    VECTORS:  load = PRG,     type = ro,  start = $FFFA; # NES Vectors (NMI, RESET, IRQ)
    BSS:      load = RAM,     type = bss, define = yes; # Uninitialized data (in RAM)
    ZEROPAGE: load = ZP,      type = zp,  define = yes; # Zero Page variables
    CHR:      load = CHR,     type = ro;                # Character data
    # Define the stack location (optional, cc65 usually handles it)
    # STACK:    load = RAM,     type = bss, start = $0100, size = $100; # Stack area $0100-$01FF
}

# Define symbols needed by the C library/startup code
SYMBOLS {
    __STACKSIZE__:  value = $0100; # Size of the stack ($0100-$01FF)
    # Define where the BSS segment ends (used by startup code for clearing BSS)
    __BSS_LOAD__:   type = import;
    __BSS_RUN__:    type = import;
    __BSS_SIZE__:   type = import;
    # Define where the DATA segment is in ROM and RAM
    __DATA_LOAD__:  type = import;
    __DATA_RUN__:   type = import;
    __DATA_SIZE__:  type = import;
}

# Define features used (like constructor/destructor support)
FEATURES {
    CONDES: type = constructor,
            label = __CONSTRUCTOR_TABLE__,
            count = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type = destructor,
            label = __DESTRUCTOR_TABLE__,
            count = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type = interruptor,
            label = __INTERRUPTOR_TABLE__,
            count = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import = __CALLIRQ__;
}

# Define the iNES Header structure
# See: https://wiki.nesdev.org/w/index.php/INES
HEADER {
    SIGNATURE: string = "NES", $1A; # NES<EOF>
    PRG_UNITS: value = $02; # Number of 16KB PRG banks (32KB / 16KB = 2)
    CHR_UNITS: value = $01; # Number of 8KB CHR banks (8KB / 8KB = 1)
    MAPPER_LOW: value = %M(0) << 4 | %F(HARD_WIRED_MIRRORING); # Mapper 0 (NROM), Mirroring (0=Horizontal, 1=Vertical)
    MAPPER_HI: value = %M(0) & $F0 | %F(NES2_0) << 2; # Mapper 0 upper nibble, NES 2.0 flag
    PRG_RAM_SIZE: value = $00; # PRG RAM size (if any)
    TV_SYSTEM: value = $00; # 0=NTSC, 1=PAL
    RESERVED: fill = 5, value = $00; # Reserved bytes
}

# Define default values if not specified elsewhere
FILES {
    %O: format = bin; # Output format is binary
}

# Define mapper and mirroring (used in HEADER section)
# Set MAPPER=0 for NROM
# Set HARD_WIRED_MIRRORING=0 for Horizontal, 1 for Vertical
SYMBOLS {
    %M = $00; # Mapper 0 (NROM)
    %F(HARD_WIRED_MIRRORING) = 0; # Horizontal Mirroring
    %F(NES2_0) = 0; # Use iNES 1.0 header format for simplicity
}
