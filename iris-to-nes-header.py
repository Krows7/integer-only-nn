#!/usr/bin/env python3

import os
import sys
import random

# --- Configuration ---
INPUT_DATA_FILE = "data/iris/iris.data"
OUTPUT_HEADER_FILE = "src/nes/iris-data.h"
OUTPUT_DIR = os.path.dirname(OUTPUT_HEADER_FILE)
SHUFFLE_SAMPLES = False

# --- Data Processing Parameters ---
FEATURE_MULTIPLIER = 10.0
CLASS_MAP = {
    "Iris-setosa": 0,
    "Iris-versicolor": 1,
    "Iris-virginica": 2,
}
NUM_FEATURES = 4

# --- Helper Function ---
def clamp_int8(value):
    """Clamps a value to the int8_t range [-128, 127]."""
    if value > 127:
        return 127
    if value < -128:
        return -128
    return int(value) # Ensure it's an integer after clamping

# --- Main Script Logic ---
def main():
    print(f"Reading Iris data from: {INPUT_DATA_FILE}")
    print(f"Will generate header file: {OUTPUT_HEADER_FILE}")

    if not os.path.exists(INPUT_DATA_FILE):
        print(f"Error: Input data file not found at '{INPUT_DATA_FILE}'", file=sys.stderr)
        sys.exit(1)

    processed_X = []
    processed_Y = []
    sample_count = 0

    try:
        with open(INPUT_DATA_FILE, 'r') as infile:
            for line_num, line in enumerate(infile):
                line = line.strip()
                if not line:
                    continue # Skip empty lines

                parts = line.split(',')
                if len(parts) != NUM_FEATURES + 1:
                    print(f"Warning: Skipping malformed line {line_num + 1}: '{line}'", file=sys.stderr)
                    continue

                try:
                    # Process features (X)
                    features_str = parts[:NUM_FEATURES]
                    features_float = [float(f) for f in features_str]
                    features_multiplied = [f * FEATURE_MULTIPLIER for f in features_float]
                    features_int = [clamp_int8(round(f)) for f in features_multiplied] # Round before clamping
                    processed_X.append(features_int)

                    # Process class label (Y)
                    class_name = parts[NUM_FEATURES].strip()
                    if class_name not in CLASS_MAP:
                        print(f"Warning: Skipping line {line_num + 1} due to unknown class name: '{class_name}'", file=sys.stderr)
                        processed_X.pop() # Remove the features added for this invalid line
                        continue
                    class_label = CLASS_MAP[class_name]
                    processed_Y.append(class_label)

                    sample_count += 1

                except ValueError as e:
                    print(f"Warning: Skipping line {line_num + 1} due to value error: '{line}' ({e})", file=sys.stderr)
                    if len(processed_X) > len(processed_Y): # Ensure X is popped if error occurred after adding it
                        processed_X.pop()
                    continue

    except IOError as e:
        print(f"Error reading input file '{INPUT_DATA_FILE}': {e}", file=sys.stderr)
        sys.exit(1)

    print(f"Successfully processed {sample_count} samples.")

    if sample_count == 0:
        print("Error: No valid samples processed. Header file will not be generated.", file=sys.stderr)
        sys.exit(1)

    # --- Generate Header File ---
    print(f"Generating {OUTPUT_HEADER_FILE}...")
    try:
        # Create output directory if it doesn't exist
        os.makedirs(OUTPUT_DIR, exist_ok=True)

        with open(OUTPUT_HEADER_FILE, 'w') as outfile:
            indices = list(range(sample_count))
            if SHUFFLE_SAMPLES:
                random.shuffle(indices)

            outfile.write("// Generated by script. Do not edit manually.\n")
            outfile.write("#ifndef IRIS_DATA_H\n")
            outfile.write("#define IRIS_DATA_H\n\n")
            outfile.write("#include <stdint.h> // For int8_t\n\n")

            # Define number of samples
            outfile.write(f"#define IRIS_SAMPLES {sample_count}\n")
            outfile.write(f"#define IRIS_FEATURES {NUM_FEATURES}\n\n")

            # Write X data array
            outfile.write(f"// Iris Features (X): int8_t[IRIS_SAMPLES][IRIS_FEATURES]\n")
            outfile.write(f"// Original float values multiplied by {FEATURE_MULTIPLIER:.1f} and rounded/clamped to int8_t.\n")
            outfile.write(f"const int8_t iris_X[IRIS_SAMPLES][IRIS_FEATURES] = {{\n")
            for i, features in enumerate(processed_X):
                # feature_str = ", ".join(map(str, features))
                feature_str = ", ".join(map(str, processed_X[indices[i]]))
                outfile.write(f"    {{{feature_str}}}")
                if i < sample_count - 1:
                    outfile.write(",")
                outfile.write("\n")
            outfile.write("};\n\n")

            # Write Y data array
            outfile.write("// Iris Class Labels (Y): int8_t[IRIS_SAMPLES]\n")
            outfile.write("// Iris-setosa=0, Iris-versicolor=1, Iris-virginica=2\n")
            outfile.write("const int8_t iris_Y[IRIS_SAMPLES] = {\n    ")
            for i, label in enumerate(processed_Y):
                # outfile.write(str(label))
                outfile.write(str(processed_Y[indices[i]]))
                if i < sample_count - 1:
                    outfile.write(", ")
                    # Add line breaks for readability
                    if (i + 1) % 20 == 0:
                        outfile.write("\n    ")
            outfile.write("\n};\n\n")

            outfile.write("#endif // IRIS_DATA_H\n")

        print(f"Successfully created {OUTPUT_HEADER_FILE}")

    except IOError as e:
        print(f"Error writing output file '{OUTPUT_HEADER_FILE}': {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
         print(f"An unexpected error occurred during file generation: {e}", file=sys.stderr)
         sys.exit(1)


if __name__ == "__main__":
    main()
